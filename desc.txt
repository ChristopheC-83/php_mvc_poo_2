Pour ce projet, nous allons reprendre le projet MVC fait selon une méthode précédurale/fonctionnelle, la vidéo tournée juste avant, mais nous allons y incorporée POO.

Pourquoi ?

bon, déjà oubliez votre apprentissage des bases de la poo !
Comme certains d'entre vous, j'ai créé des classes animaux ou voitures.
J'instanciais des objets 
voiture bleue de marque citroen
voiture rouge de marque renault....

La poo c'est plus que ça !
Plus que que de créer des objets, les classes vont nous permettre de passer des méthodes, des fonctions encapsulées dans les classes.
La fonction create de l'objet personnage ne sera pas la fonction create de l'objet arme dans un jeu de role par exemple.

La poo va permettre, entre autres
l'heritage, qui permettra de limiter les répétitions si des méthodes sont communes à plusieurs classes.
une meileure modularité et organisation, chaque classe sera un concept spécifique. Dans le cadre d'une mise à jour, d'un upscale, le code sera plus compréhensible.

Je ne m'attarderai pas spécialement sur le MVC, une vidéo dédiée a déjà était faite à ce sujet.

L'objectif est de commencer en faisant un projet relativement vierge pour que vous puissiez lancer vos propres projets  à partir de cette structure
et ensuite seulement, nous mettrons en place un CRUD.
Plus tard
je viendrai surement mettre en place des features comme un systeme de connexion, d'administration, un wysiwyg, du mailing, de l'upload de fichiers... ce ne sont que des exemples... à voir par la suite...
Si vous avez une envie, un besoin qui entre dans mes cordes, la partie commentaires est là pour ça 

Et tout ça dans la strucutre que nous allons metre en place ensemble de ce pas !

Afin d'avoir un suivi d'étape en étape, je vais poster ce projet sur github et créer une branche à chaque grande marche.

Le lien du projet sera évidemment disponible en commentaire de cette vidéo.

Voilà pour l'intro !
Allez ! On est parti !

Toujours pareil, nous partons d'un dossier vierge avec nos images de personnages (ou autres à votre convenance...)
Et nous mettons en place notre structure
index.php
les dossiers controllers / views / models /public
Dans public, on crée les dossiers  files / javascript / style et transférer nos images.
Dans views, on crée commons (pour le ou les templates par exemple) / components (pour les cartes de personanges ouautres) / pages

Plus tard, dans chacun de ces 3 dossiers du MVC, nous pourrons subdiviser en Admin / User et Visitor afin d'affiner notre classement de dossiers et fichiers.

on va s'attaquer à notre routeur, point d'entrée de notre projet

on va sélectionner une page en fonction de ce que nous aurons dans notre url.
pour ne pas avoir de index.php?page = 
et faire un GET de ce que contiendra cette variable
on met en place notre fichier .htaccess... qui sera toujours le même !
Un petit copier/coller qui va bien.

Et on va tester s'il y a qq chose 
si non, on ira à l'accueil, 
si oui, on découpera l'url en fonction des slash et on déclenchera une fonction qui nous mènera sur la bonne page

on nommera en français ce qui sera visible dans l'url, mais nous nommerons en anglais nos variables, classes et méthodes.

donc si homePage(), vscode nous alerte d'une erreur, la fonction n'existe pas.
Nous créons la classe controllers/MainController.php -> Class MainController{}

On commence avec la méthode homePage()

Dans index.php, on importe le fichier de MainController
On crée un objet qui permettra d'appeler la méthode homePage()
On crée également errorPage dans le MainController{}

pour l'exemple, on propose d'appeler  egalement page1 et de créer la méthode page1Page()

Ca fonctionne, super !

On modifie la méthode homePage de maincontroller et on appelle une vue, la homePage

On en fait une vraie page
le doctype html
un h1 - coucou dans le body pour tester
on insere les cdn css et js récupérés sur getbootstrap
on crée et associe un custom.scss, on le teste en mettant h1 red

Dans bootstrap, on appelle la 1ere navbar , on l'ajuste
page1 dans la navbar appele bien la page 1 !

on crée un footer basique

on flex tout ça pour footer en bas

On va créer notre repository sur github avant de passer à la suite.

sur mon github, new repository : php_mvc_poo

Dans vscode, terminal de type git bash pour ma part
git init 
