transformons le bouton modifier en formulaire

nous allons renvoyer à cette même page un id, s'il correspond à l'id d'un des elements dans le tableau, on en fait un formulaire


nous dirons que si il n'y a pas de post[id] ou si post[id] est différent de side[id]
on garde l'affichage classique

SidesConcontroller
on affiche un formulairele nom de la classe sera un input avec en valeur le nom de la classe
on ajoute un input color 
on pense à envoyer l'id en hidden au passage

ici, on envoie donc id, le nom, la couleur et l'ancien nom, c'est important, vous allez voir pourquoi !


on vérifie qu'on a bien renseigné un lien dans action

on récupère et sécurisons tout ça dans le sidesIndex
Si un vide...message d'erreur avec lien de retour à la liste

sinon envoi des infosau sidesController à la méthode modifySide

La ere chose qu'on va vouloir vérifier est si le nom est dispo 
Si vous avez 
classes de personnages avec le même nom, on risque d'être embété !
Le probleme est aussi que si on ne change pas le nom, comme on renvoit le meme nom, c'est comme s'il n'était pas dispo non plus !

on cherche donc une classe avec le nouveau nom et on regarde s'il est dispo sauf s'il est egal à l'ancien nom.

Si pas dispo, msg erreur et lien pour retour à la liste

Si dispo on essaye la modif sinon erreur
Si réussite, retour à la listeon va créer la methode dans le sides model, un update classique
du nom et de la couleur where id = id.

on vérifie sur une carte...
Cool on a fait le U du CRUD
On passe au D !

Le bouton existe déjà....
on en fait un formulaire.
Ca va aller vite !

dans la card, le btn devient un formulair equi envoie une clé unique à notre DB pour lui dire "efface moi"
cette clé unique est bien entendue l'id

modifions la card
l'adresse deleteIndex renvoie à notre sidesIndex
plus on repete les choses, plus on observe la même mécanique.
Je souhaite réellement que vous puissiez mener à bien vos propres projets après ces répétitions que nous faisons ensemble.

Bon dans notre index, le case, le break et qu'est ce qu'on reçoit ? un petit echo va nous dire ça...

on va envoyer ça à notre controller qui va communiquer à notre model
les classes sidesController et sidesModel evidemment

on a un violent message d'erreur ca on n'arrive même pas jsuqu'à l'exception du controller.
Ca plante déjà dans le model !

soit, faisons un try/catch dans la méthode du model

on ne va pas gerer le message d'erreur dans le model, ce n'est pas son role, on renverra simplement false
le controller reprend alors la main

testons avec une classe inutilisée par un personnage, ok, le D est géré !

Finissons par le create !

dans la page sideListePage
créons un formulaire
envoie à l'index, on vérifie les données reçues
envoie au controller qui vérifie que le nom n'existe pas déjà
si non , envoie de la donnée au model
et voilà !

testons notre nouvelle classe sur un personnage

j'observe que mes perosnnages se déplacent en fonction de leur classe !?!
allors chercher l'erreur
facile, avec la poo on sait facilement où chercher
j'ajoute ORDER BY characters.id ASC
dans le CharactersModel, tout simplement

On a fait notre crud des classes en 1 page !
Si ce n'est pas déjà fait, ajoutons le lien à la navbar

J'en profite pour faire une modification 
pour ne pas avoir des liens à gérer ainsi, nous allons vite nous fair eun tableau sur lequel nous allons boucler

mieux ainsi non ?

passons à l'administration